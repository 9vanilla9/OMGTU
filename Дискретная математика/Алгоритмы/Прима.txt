namespace Prim
{
    class Program
    {
        static void Main()
        {
            int n = 7; 
            double[,] rebra = new double[n, n];
            int[] V = new int[n];
            List<double> ostov = new List<double>();
            List<int> U = [0];
            double result = 0;
            List<int> v = new List<int>();
            List<int> u = new List<int>();
            for (int i = 0; i < n; i++)
            {
                V[i] = i+1;
            }
            rebra[0, 1] = 5;
            rebra[0, 2] = 3;
            rebra[0, 4] = 11;
            rebra[1, 3] = 10;
            rebra[1, 4] = 3;
            rebra[1, 2] = 8;
            rebra[2, 4] = 3;
            rebra[3, 4] = 8;
            rebra[3, 6] = 6;
            rebra[3, 5] = 5;
            rebra[4, 6] = 4;
            while (U.Count != V.Length)
            {
                double rebM = double.PositiveInfinity;
                int verj = 0;
                int veri = 0;
                for (int i = 0; i < U.Count; i++)
                {
                    for (int j = 0; j < n; j++)
                    {
                        if (U.Contains(j))
                        {
                            continue;
                        }
                        else
                        {
                            if (rebra[U[i], j] < rebM && rebra[U[i], j] != 0)
                            {
                                rebM = rebra[U[i], j];
                                veri = U[i];
                                verj = j;
                            }
                        }
                    }
                }
                rebra[veri, verj] = double.PositiveInfinity;
                rebra[verj, veri] = double.PositiveInfinity;
                v.Add(veri); 
                u.Add(verj);
                U.Add(verj);
                ostov.Add(rebM); 
            }

            for (int i = 0; i<ostov.Count; i++)
            {
                result += ostov[i];
            }
            Console.WriteLine("Длина остовного дерева: " + result);
            Console.WriteLine("Ребро \tДлина");
            for (int i = 0; i < ostov.Count; i++)
            {
                Console.WriteLine((v[i] + 1) + " - " + (u[i] + 1) + "\t" + ostov[i]);
            }
        }
    }
}