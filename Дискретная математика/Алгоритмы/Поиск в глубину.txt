class Program
{
    static void Main()
    {
        int V = 7;
        int[] verp = new int[V];
        int[,] graph = new int[V, V];
        Dictionary<int, int> kompS = new Dictionary<int, int>();
        List<(int, int)> tree = new List<(int, int)>();
        kompS[0] = 1;
        graph[0, 4] = 1; graph[4, 0] = 1;
        graph[4, 1] = 1; graph[1, 4] = 1;
        graph[1, 2] = 1; graph[2, 1] = 1;
        graph[0, 6] = 1; graph[6, 0] = 1;
        graph[2, 5] = 1; graph[5, 2] = 1;
        graph[5, 4] = 1; graph[4, 5] = 1;
        graph[6, 4] = 1; graph[4, 6] = 1;
        for (int j = 0; j < V; j++) 
        { 
        Dfs(graph, j, verp, V, kompS);
        }
        Console.WriteLine("Вершина\tКомпонента связности");
        foreach (var d in kompS)
        {
            Console.WriteLine(d.Key + "\t\t\t" + d.Value);
        }
    }
    static int FindMaxValue(Dictionary<int, int> D)
    {
        int max = 0;
        foreach (var d in D)
        {
            if (d.Value > max) max = d.Value;
        }
        return max;
    }
    static void Dfs(int[,] graph, int T, int[] verp, int V, Dictionary<int, int> D)
    {
        if (!D.ContainsKey(T)) D[T] = FindMaxValue(D) + 1;
        verp[T] = 1;
        for (int to = 0; to < V; to++)
        {
            if ((graph[T, to] == 1) && (verp[to] != 1))
            {
                D[to] = D[T];
                Dfs(graph, to, verp, V, D);
            }
        }
    }
}